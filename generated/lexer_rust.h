#if !defined(FCODER_LEX_GEN_HAND_WRITTEN_TYPES)
#define FCODER_LEX_GEN_HAND_WRITTEN_TYPES

struct Lexeme_Table_Value{
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

struct Lexeme_Table_Lookup{
    b32 found_match;
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

#endif
typedef u16 Token_Rust_Kind;
enum{
TokenRustKind_EOF = 0,
TokenRustKind_Whitespace = 1,
TokenRustKind_LexError = 2,
TokenRustKind_BlockComment = 3,
TokenRustKind_LineComment = 4,
TokenRustKind_Backslash = 5,
TokenRustKind_LiteralInteger = 6,
TokenRustKind_LiteralIntegerHex = 7,
TokenRustKind_LiteralIntegerOct = 8,
TokenRustKind_LiteralIntegerDoz = 9,
TokenRustKind_LiteralIntegerBin = 10,
TokenRustKind_LiteralFloat = 11,
TokenRustKind_LiteralString = 12,
TokenRustKind_LiteralStringWide = 13,
TokenRustKind_LiteralStringUTF8 = 14,
TokenRustKind_LiteralStringUTF16 = 15,
TokenRustKind_LiteralStringUTF32 = 16,
TokenRustKind_LiteralStringRaw = 17,
TokenRustKind_LiteralStringWideRaw = 18,
TokenRustKind_LiteralStringUTF8Raw = 19,
TokenRustKind_LiteralStringUTF16Raw = 20,
TokenRustKind_LiteralStringUTF32Raw = 21,
TokenRustKind_LiteralCharacter = 22,
TokenRustKind_LiteralCharacterWide = 23,
TokenRustKind_LiteralCharacterUTF8 = 24,
TokenRustKind_LiteralCharacterUTF16 = 25,
TokenRustKind_LiteralCharacterUTF32 = 26,
TokenRustKind_KeywordGeneric = 27,
TokenRustKind_KeywordAttribute = 28,
TokenRustKind_AttributeOpen = 29,
TokenRustKind_AttributeClose = 30,
TokenRustKind_IdentifierMacro = 31,
TokenRustKind_BraceOp = 32,
TokenRustKind_BraceCl = 33,
TokenRustKind_ParenOp = 34,
TokenRustKind_BrackOp = 35,
TokenRustKind_ParenCl = 36,
TokenRustKind_BrackCl = 37,
TokenRustKind_Semicolon = 38,
TokenRustKind_Apostrophe = 39,
TokenRustKind_DotDot = 40,
TokenRustKind_DotDotEq = 41,
TokenRustKind_Colon = 42,
TokenRustKind_ColonColon = 43,
TokenRustKind_Dot = 44,
TokenRustKind_Plus = 45,
TokenRustKind_Minus = 46,
TokenRustKind_Not = 47,
TokenRustKind_Tilde = 48,
TokenRustKind_Star = 49,
TokenRustKind_And = 50,
TokenRustKind_Div = 51,
TokenRustKind_Mod = 52,
TokenRustKind_Arrow = 53,
TokenRustKind_LeftLeft = 54,
TokenRustKind_RightRight = 55,
TokenRustKind_Less = 56,
TokenRustKind_LessEq = 57,
TokenRustKind_Grtr = 58,
TokenRustKind_GrtrEq = 59,
TokenRustKind_EqEq = 60,
TokenRustKind_NotEq = 61,
TokenRustKind_Carrot = 62,
TokenRustKind_Or = 63,
TokenRustKind_AndAnd = 64,
TokenRustKind_OrOr = 65,
TokenRustKind_Question = 66,
TokenRustKind_Eq = 67,
TokenRustKind_ColonEq = 68,
TokenRustKind_PlusEq = 69,
TokenRustKind_MinusEq = 70,
TokenRustKind_StarEq = 71,
TokenRustKind_DivEq = 72,
TokenRustKind_ModEq = 73,
TokenRustKind_LeftLeftEq = 74,
TokenRustKind_RightRightEq = 75,
TokenRustKind_Comma = 76,
TokenRustKind_abstract = 77,
TokenRustKind_alignof = 78,
TokenRustKind_as = 79,
TokenRustKind_become = 80,
TokenRustKind_box = 81,
TokenRustKind_break = 82,
TokenRustKind_const = 83,
TokenRustKind_continue = 84,
TokenRustKind_crate = 85,
TokenRustKind_do = 86,
TokenRustKind_else = 87,
TokenRustKind_enum = 88,
TokenRustKind_extern = 89,
TokenRustKind_final = 90,
TokenRustKind_fn = 91,
TokenRustKind_for = 92,
TokenRustKind_if = 93,
TokenRustKind_impl = 94,
TokenRustKind_in = 95,
TokenRustKind_let = 96,
TokenRustKind_loop = 97,
TokenRustKind_macro = 98,
TokenRustKind_macro_rules = 99,
TokenRustKind_match = 100,
TokenRustKind_mod = 101,
TokenRustKind_move = 102,
TokenRustKind_mut = 103,
TokenRustKind_offsetof = 104,
TokenRustKind_override = 105,
TokenRustKind_priv = 106,
TokenRustKind_proc = 107,
TokenRustKind_pub = 108,
TokenRustKind_pure = 109,
TokenRustKind_ref = 110,
TokenRustKind_return = 111,
TokenRustKind_Self = 112,
TokenRustKind_sizeof = 113,
TokenRustKind_static = 114,
TokenRustKind_struct = 115,
TokenRustKind_super = 116,
TokenRustKind_trait = 117,
TokenRustKind_type = 118,
TokenRustKind_typeof = 119,
TokenRustKind_unsafe = 120,
TokenRustKind_unsized = 121,
TokenRustKind_use = 122,
TokenRustKind_virtual = 123,
TokenRustKind_where = 124,
TokenRustKind_while = 125,
TokenRustKind_yield = 126,
TokenRustKind_union = 127,
TokenRustKind_LiteralTrue = 128,
TokenRustKind_LiteralFalse = 129,
TokenRustKind_bool = 130,
TokenRustKind_char = 131,
TokenRustKind_str = 132,
TokenRustKind_i8 = 133,
TokenRustKind_u8 = 134,
TokenRustKind_i16 = 135,
TokenRustKind_u16 = 136,
TokenRustKind_i32 = 137,
TokenRustKind_u32 = 138,
TokenRustKind_i64 = 139,
TokenRustKind_u64 = 140,
TokenRustKind_i128 = 141,
TokenRustKind_u128 = 142,
TokenRustKind_usize = 143,
TokenRustKind_isize = 144,
TokenRustKind_f32 = 145,
TokenRustKind_f64 = 146,
TokenRustKind_Identifier = 147,
TokenRustKind_COUNT = 148,
};
char *token_rust_kind_names[] = {
"EOF",
"Whitespace",
"LexError",
"BlockComment",
"LineComment",
"Backslash",
"LiteralInteger",
"LiteralIntegerHex",
"LiteralIntegerOct",
"LiteralIntegerDoz",
"LiteralIntegerBin",
"LiteralFloat",
"LiteralString",
"LiteralStringWide",
"LiteralStringUTF8",
"LiteralStringUTF16",
"LiteralStringUTF32",
"LiteralStringRaw",
"LiteralStringWideRaw",
"LiteralStringUTF8Raw",
"LiteralStringUTF16Raw",
"LiteralStringUTF32Raw",
"LiteralCharacter",
"LiteralCharacterWide",
"LiteralCharacterUTF8",
"LiteralCharacterUTF16",
"LiteralCharacterUTF32",
"KeywordGeneric",
"KeywordAttribute",
"AttributeOpen",
"AttributeClose",
"IdentifierMacro",
"BraceOp",
"BraceCl",
"ParenOp",
"BrackOp",
"ParenCl",
"BrackCl",
"Semicolon",
"Apostrophe",
"DotDot",
"DotDotEq",
"Colon",
"ColonColon",
"Dot",
"Plus",
"Minus",
"Not",
"Tilde",
"Star",
"And",
"Div",
"Mod",
"Arrow",
"LeftLeft",
"RightRight",
"Less",
"LessEq",
"Grtr",
"GrtrEq",
"EqEq",
"NotEq",
"Carrot",
"Or",
"AndAnd",
"OrOr",
"Question",
"Eq",
"ColonEq",
"PlusEq",
"MinusEq",
"StarEq",
"DivEq",
"ModEq",
"LeftLeftEq",
"RightRightEq",
"Comma",
"abstract",
"alignof",
"as",
"become",
"box",
"break",
"const",
"continue",
"crate",
"do",
"else",
"enum",
"extern",
"final",
"fn",
"for",
"if",
"impl",
"in",
"let",
"loop",
"macro",
"macro_rules",
"match",
"mod",
"move",
"mut",
"offsetof",
"override",
"priv",
"proc",
"pub",
"pure",
"ref",
"return",
"Self",
"sizeof",
"static",
"struct",
"super",
"trait",
"type",
"typeof",
"unsafe",
"unsized",
"use",
"virtual",
"where",
"while",
"yield",
"union",
"LiteralTrue",
"LiteralFalse",
"bool",
"char",
"str",
"i8",
"u8",
"i16",
"u16",
"i32",
"u32",
"i64",
"u64",
"i128",
"u128",
"usize",
"isize",
"f32",
"f64",
"Identifier",
};
