#if !defined(FCODER_LEX_GEN_HAND_WRITTEN_TYPES)
#define FCODER_LEX_GEN_HAND_WRITTEN_TYPES

struct Lexeme_Table_Value{
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

struct Lexeme_Table_Lookup{
    b32 found_match;
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

#endif
typedef u16 Token_Odin_Kind;
enum{
TokenOdinKind_EOF = 0,
TokenOdinKind_Whitespace = 1,
TokenOdinKind_LexError = 2,
TokenOdinKind_BlockComment = 3,
TokenOdinKind_LineComment = 4,
TokenOdinKind_Backslash = 5,
TokenOdinKind_LiteralInteger = 6,
TokenOdinKind_LiteralIntegerU = 7,
TokenOdinKind_LiteralIntegerL = 8,
TokenOdinKind_LiteralIntegerUL = 9,
TokenOdinKind_LiteralIntegerLL = 10,
TokenOdinKind_LiteralIntegerULL = 11,
TokenOdinKind_LiteralIntegerHex = 12,
TokenOdinKind_LiteralIntegerHexU = 13,
TokenOdinKind_LiteralIntegerHexL = 14,
TokenOdinKind_LiteralIntegerHexUL = 15,
TokenOdinKind_LiteralIntegerHexLL = 16,
TokenOdinKind_LiteralIntegerHexULL = 17,
TokenOdinKind_LiteralIntegerOct = 18,
TokenOdinKind_LiteralIntegerOctU = 19,
TokenOdinKind_LiteralIntegerOctL = 20,
TokenOdinKind_LiteralIntegerOctUL = 21,
TokenOdinKind_LiteralIntegerOctLL = 22,
TokenOdinKind_LiteralIntegerOctULL = 23,
TokenOdinKind_LiteralFloat32 = 24,
TokenOdinKind_LiteralFloat64 = 25,
TokenOdinKind_LiteralString = 26,
TokenOdinKind_LiteralStringWide = 27,
TokenOdinKind_LiteralStringUTF8 = 28,
TokenOdinKind_LiteralStringUTF16 = 29,
TokenOdinKind_LiteralStringUTF32 = 30,
TokenOdinKind_LiteralStringRaw = 31,
TokenOdinKind_LiteralStringWideRaw = 32,
TokenOdinKind_LiteralStringUTF8Raw = 33,
TokenOdinKind_LiteralStringUTF16Raw = 34,
TokenOdinKind_LiteralStringUTF32Raw = 35,
TokenOdinKind_LiteralCharacter = 36,
TokenOdinKind_LiteralCharacterWide = 37,
TokenOdinKind_LiteralCharacterUTF8 = 38,
TokenOdinKind_LiteralCharacterUTF16 = 39,
TokenOdinKind_LiteralCharacterUTF32 = 40,
TokenOdinKind_PPIncludeFile = 41,
TokenOdinKind_PPErrorMessage = 42,
TokenOdinKind_KeywordGeneric = 43,
TokenOdinKind_BraceOp = 44,
TokenOdinKind_BraceCl = 45,
TokenOdinKind_ParenOp = 46,
TokenOdinKind_BrackOp = 47,
TokenOdinKind_ParenCl = 48,
TokenOdinKind_BrackCl = 49,
TokenOdinKind_Semicolon = 50,
TokenOdinKind_Range = 51,
TokenOdinKind_OpenRange = 52,
TokenOdinKind_ClosedRange = 53,
TokenOdinKind_Colon = 54,
TokenOdinKind_ColonColon = 55,
TokenOdinKind_ColonEq = 56,
TokenOdinKind_Dot = 57,
TokenOdinKind_Plus = 58,
TokenOdinKind_Minus = 59,
TokenOdinKind_Not = 60,
TokenOdinKind_Tilde = 61,
TokenOdinKind_Star = 62,
TokenOdinKind_And = 63,
TokenOdinKind_DotStar = 64,
TokenOdinKind_Div = 65,
TokenOdinKind_Mod = 66,
TokenOdinKind_MinusGrtr = 67,
TokenOdinKind_ArrowStar = 68,
TokenOdinKind_LeftLeft = 69,
TokenOdinKind_RightRight = 70,
TokenOdinKind_Less = 71,
TokenOdinKind_LessEq = 72,
TokenOdinKind_Grtr = 73,
TokenOdinKind_GrtrEq = 74,
TokenOdinKind_EqEq = 75,
TokenOdinKind_NotEq = 76,
TokenOdinKind_Xor = 77,
TokenOdinKind_Or = 78,
TokenOdinKind_AndAnd = 79,
TokenOdinKind_OrOr = 80,
TokenOdinKind_Ternary = 81,
TokenOdinKind_Eq = 82,
TokenOdinKind_PlusEq = 83,
TokenOdinKind_MinusEq = 84,
TokenOdinKind_StarEq = 85,
TokenOdinKind_DivEq = 86,
TokenOdinKind_ModEq = 87,
TokenOdinKind_LeftLeftEq = 88,
TokenOdinKind_RightRightEq = 89,
TokenOdinKind_Comma = 90,
TokenOdinKind_Void = 91,
TokenOdinKind_Bool = 92,
TokenOdinKind_Char = 93,
TokenOdinKind_Int = 94,
TokenOdinKind_Float = 95,
TokenOdinKind_Double = 96,
TokenOdinKind_Long = 97,
TokenOdinKind_Short = 98,
TokenOdinKind_Unsigned = 99,
TokenOdinKind_Signed = 100,
TokenOdinKind_Const = 101,
TokenOdinKind_Volatile = 102,
TokenOdinKind_Asm = 103,
TokenOdinKind_Break = 104,
TokenOdinKind_Case = 105,
TokenOdinKind_Catch = 106,
TokenOdinKind_Continue = 107,
TokenOdinKind_Default = 108,
TokenOdinKind_Do = 109,
TokenOdinKind_Else = 110,
TokenOdinKind_For = 111,
TokenOdinKind_Goto = 112,
TokenOdinKind_If = 113,
TokenOdinKind_Return = 114,
TokenOdinKind_Switch = 115,
TokenOdinKind_Try = 116,
TokenOdinKind_While = 117,
TokenOdinKind_StaticAssert = 118,
TokenOdinKind_ConstCast = 119,
TokenOdinKind_DynamicCast = 120,
TokenOdinKind_ReinterpretCast = 121,
TokenOdinKind_StaticCast = 122,
TokenOdinKind_Class = 123,
TokenOdinKind_Enum = 124,
TokenOdinKind_Struct = 125,
TokenOdinKind_Typedef = 126,
TokenOdinKind_Union = 127,
TokenOdinKind_Template = 128,
TokenOdinKind_Typename = 129,
TokenOdinKind_Friend = 130,
TokenOdinKind_Namespace = 131,
TokenOdinKind_Private = 132,
TokenOdinKind_Protected = 133,
TokenOdinKind_Public = 134,
TokenOdinKind_Using = 135,
TokenOdinKind_Extern = 136,
TokenOdinKind_Export = 137,
TokenOdinKind_Inline = 138,
TokenOdinKind_Static = 139,
TokenOdinKind_Virtual = 140,
TokenOdinKind_AlignAs = 141,
TokenOdinKind_Explicit = 142,
TokenOdinKind_NoExcept = 143,
TokenOdinKind_NullPtr = 144,
TokenOdinKind_Operator = 145,
TokenOdinKind_Register = 146,
TokenOdinKind_This = 147,
TokenOdinKind_ThreadLocal = 148,
TokenOdinKind_AlignOf = 149,
TokenOdinKind_DeclType = 150,
TokenOdinKind_TypeID = 151,
TokenOdinKind_New = 152,
TokenOdinKind_Delete = 153,
TokenOdinKind_b8 = 154,
TokenOdinKind_b16 = 155,
TokenOdinKind_b32 = 156,
TokenOdinKind_b64 = 157,
TokenOdinKind_i8 = 158,
TokenOdinKind_i16 = 159,
TokenOdinKind_i32 = 160,
TokenOdinKind_i64 = 161,
TokenOdinKind_i128 = 162,
TokenOdinKind_uint = 163,
TokenOdinKind_u8 = 164,
TokenOdinKind_u16 = 165,
TokenOdinKind_u32 = 166,
TokenOdinKind_u64 = 167,
TokenOdinKind_u128 = 168,
TokenOdinKind_i16le = 169,
TokenOdinKind_i32le = 170,
TokenOdinKind_i64le = 171,
TokenOdinKind_i128le = 172,
TokenOdinKind_u16le = 173,
TokenOdinKind_u32le = 174,
TokenOdinKind_u64le = 175,
TokenOdinKind_u128le = 176,
TokenOdinKind_i16be = 177,
TokenOdinKind_i32be = 178,
TokenOdinKind_i64be = 179,
TokenOdinKind_i128be = 180,
TokenOdinKind_u16be = 181,
TokenOdinKind_u32be = 182,
TokenOdinKind_u64be = 183,
TokenOdinKind_u128be = 184,
TokenOdinKind_f16 = 185,
TokenOdinKind_f32 = 186,
TokenOdinKind_f64 = 187,
TokenOdinKind_f16le = 188,
TokenOdinKind_f32le = 189,
TokenOdinKind_f64le = 190,
TokenOdinKind_f16be = 191,
TokenOdinKind_f32be = 192,
TokenOdinKind_f64be = 193,
TokenOdinKind_complex32 = 194,
TokenOdinKind_complex64 = 195,
TokenOdinKind_complex128 = 196,
TokenOdinKind_quaternion64 = 197,
TokenOdinKind_quaternion128 = 198,
TokenOdinKind_quaternion256 = 199,
TokenOdinKind_string = 200,
TokenOdinKind_cstring = 201,
TokenOdinKind_rawptr = 202,
TokenOdinKind_nil = 203,
TokenOdinKind_byte = 204,
TokenOdinKind_any = 205,
TokenOdinKind_package = 206,
TokenOdinKind_import = 207,
TokenOdinKind_foreign = 208,
TokenOdinKind_when = 209,
TokenOdinKind_defer = 210,
TokenOdinKind_in = 211,
TokenOdinKind_not_in = 212,
TokenOdinKind_or_else = 213,
TokenOdinKind_or_return = 214,
TokenOdinKind_fallthrough = 215,
TokenOdinKind_proc = 216,
TokenOdinKind_bit_field = 217,
TokenOdinKind_bit_set = 218,
TokenOdinKind_map = 219,
TokenOdinKind_dynamic = 220,
TokenOdinKind_cast = 221,
TokenOdinKind_auto_cast = 222,
TokenOdinKind_transmute = 223,
TokenOdinKind_no_inline = 224,
TokenOdinKind_context = 225,
TokenOdinKind_size_of = 226,
TokenOdinKind_align_of = 227,
TokenOdinKind_offset_of = 228,
TokenOdinKind_type_of = 229,
TokenOdinKind_distinct = 230,
TokenOdinKind_opaque = 231,
TokenOdinKind_LiteralTrue = 232,
TokenOdinKind_LiteralFalse = 233,
TokenOdinKind_Identifier = 234,
TokenOdinKind_PPInclude = 235,
TokenOdinKind_PPVersion = 236,
TokenOdinKind_PPDefine = 237,
TokenOdinKind_PPUndef = 238,
TokenOdinKind_PPIfDef = 239,
TokenOdinKind_PPIfNDef = 240,
TokenOdinKind_PPElse = 241,
TokenOdinKind_PPElIf = 242,
TokenOdinKind_PPEndIf = 243,
TokenOdinKind_PPError = 244,
TokenOdinKind_PPUsing = 245,
TokenOdinKind_PPLine = 246,
TokenOdinKind_PPIf = 247,
TokenOdinKind_PPImport = 248,
TokenOdinKind_PPPragma = 249,
TokenOdinKind_PPLoad = 250,
TokenOdinKind_PPUnknown = 251,
TokenOdinKind_PPDefined = 252,
TokenOdinKind_COUNT = 253,
};
char *token_odin_kind_names[] = {
"EOF",
"Whitespace",
"LexError",
"BlockComment",
"LineComment",
"Backslash",
"LiteralInteger",
"LiteralIntegerU",
"LiteralIntegerL",
"LiteralIntegerUL",
"LiteralIntegerLL",
"LiteralIntegerULL",
"LiteralIntegerHex",
"LiteralIntegerHexU",
"LiteralIntegerHexL",
"LiteralIntegerHexUL",
"LiteralIntegerHexLL",
"LiteralIntegerHexULL",
"LiteralIntegerOct",
"LiteralIntegerOctU",
"LiteralIntegerOctL",
"LiteralIntegerOctUL",
"LiteralIntegerOctLL",
"LiteralIntegerOctULL",
"LiteralFloat32",
"LiteralFloat64",
"LiteralString",
"LiteralStringWide",
"LiteralStringUTF8",
"LiteralStringUTF16",
"LiteralStringUTF32",
"LiteralStringRaw",
"LiteralStringWideRaw",
"LiteralStringUTF8Raw",
"LiteralStringUTF16Raw",
"LiteralStringUTF32Raw",
"LiteralCharacter",
"LiteralCharacterWide",
"LiteralCharacterUTF8",
"LiteralCharacterUTF16",
"LiteralCharacterUTF32",
"PPIncludeFile",
"PPErrorMessage",
"KeywordGeneric",
"BraceOp",
"BraceCl",
"ParenOp",
"BrackOp",
"ParenCl",
"BrackCl",
"Semicolon",
"Range",
"OpenRange",
"ClosedRange",
"Colon",
"ColonColon",
"ColonEq",
"Dot",
"Plus",
"Minus",
"Not",
"Tilde",
"Star",
"And",
"DotStar",
"Div",
"Mod",
"MinusGrtr",
"ArrowStar",
"LeftLeft",
"RightRight",
"Less",
"LessEq",
"Grtr",
"GrtrEq",
"EqEq",
"NotEq",
"Xor",
"Or",
"AndAnd",
"OrOr",
"Ternary",
"Eq",
"PlusEq",
"MinusEq",
"StarEq",
"DivEq",
"ModEq",
"LeftLeftEq",
"RightRightEq",
"Comma",
"Void",
"Bool",
"Char",
"Int",
"Float",
"Double",
"Long",
"Short",
"Unsigned",
"Signed",
"Const",
"Volatile",
"Asm",
"Break",
"Case",
"Catch",
"Continue",
"Default",
"Do",
"Else",
"For",
"Goto",
"If",
"Return",
"Switch",
"Try",
"While",
"StaticAssert",
"ConstCast",
"DynamicCast",
"ReinterpretCast",
"StaticCast",
"Class",
"Enum",
"Struct",
"Typedef",
"Union",
"Template",
"Typename",
"Friend",
"Namespace",
"Private",
"Protected",
"Public",
"Using",
"Extern",
"Export",
"Inline",
"Static",
"Virtual",
"AlignAs",
"Explicit",
"NoExcept",
"NullPtr",
"Operator",
"Register",
"This",
"ThreadLocal",
"AlignOf",
"DeclType",
"TypeID",
"New",
"Delete",
"b8",
"b16",
"b32",
"b64",
"i8",
"i16",
"i32",
"i64",
"i128",
"uint",
"u8",
"u16",
"u32",
"u64",
"u128",
"i16le",
"i32le",
"i64le",
"i128le",
"u16le",
"u32le",
"u64le",
"u128le",
"i16be",
"i32be",
"i64be",
"i128be",
"u16be",
"u32be",
"u64be",
"u128be",
"f16",
"f32",
"f64",
"f16le",
"f32le",
"f64le",
"f16be",
"f32be",
"f64be",
"complex32",
"complex64",
"complex128",
"quaternion64",
"quaternion128",
"quaternion256",
"string",
"cstring",
"rawptr",
"nil",
"byte",
"any",
"package",
"import",
"foreign",
"when",
"defer",
"in",
"not_in",
"or_else",
"or_return",
"fallthrough",
"proc",
"bit_field",
"bit_set",
"map",
"dynamic",
"cast",
"auto_cast",
"transmute",
"no_inline",
"context",
"size_of",
"align_of",
"offset_of",
"type_of",
"distinct",
"opaque",
"LiteralTrue",
"LiteralFalse",
"Identifier",
"PPInclude",
"PPVersion",
"PPDefine",
"PPUndef",
"PPIfDef",
"PPIfNDef",
"PPElse",
"PPElIf",
"PPEndIf",
"PPError",
"PPUsing",
"PPLine",
"PPIf",
"PPImport",
"PPPragma",
"PPLoad",
"PPUnknown",
"PPDefined",
};
